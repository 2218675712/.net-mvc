@using WebApplication1.Entity

@{
    Layout = null;
    List<Info_User> infoUserModels = ViewData["list"] as List<Info_User>;
    if (infoUserModels == null)
    {
        infoUserModels = new List<Info_User>();
    }
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width"/>
    <link href="~/Content/bootstrap.css" rel="stylesheet"/>
    <title>Index</title>
</head>
<body>
<div>

    <div class="addUser">
        <!-- Button trigger modal -->
        <button type="button" class="btn btn-primary"  onclick="openAddUserModal()">
            添加/修改用户
        </button>

        <!-- Modal -->
        <div class="modal fade " id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">添加用户</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="modalContent"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                        <button type="button" class="btn btn-primary"  onclick="submit(this)"  userid="0" id="submit">提交</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="userList">

        <table class="table">
            <thead>
            <tr>
                <th scope="col">用户ID</th>
                <th scope="col">用户名</th>
                <th scope="col">密码</th>
                <th scope="col">手机号</th>
                <th scope="col">修改</th>
            </tr>
            </thead>
            <tbody>

            @foreach (var item in infoUserModels)
            {
                <tr>
                    <th scope="row">@item.ID</th>
                    <td>@item.UserName</td>
                    <td>@item.PassWord</td>
                    <td>@item.Phone</td>
                    <td><button type="button" class="btn btn-secondary" userid="@item.ID" onclick="changeUserInfo(this)" >修改</button></td>
                </tr>
            }
            </tbody>
        </table>
        <div class="alert alert-success alert-dismissible fade show fixed-top" style="visibility: hidden" role="alert" id="myAlert">
            
        </div>
    </div>

</div>
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/bootstrap.bundle.js"></script>
<script>
// 创建一个模态框
let myModal = new bootstrap.Modal(document.getElementById('staticBackdrop'), {
    backdrop: "static"
})

/**
 * 弹出添加模态框
 *
 */
async function openAddUserModal() {

    document.querySelector("#modalContent").innerHTML = await getAddUserInfo();
    myModal.toggle()
}

/**
 * 获取添加用户的相关资料
 *
 */
async function getAddUserInfo() {
    return await fetch("/User/AddUserPartialView").then(result => result.text())
}

/**
 * 弹框进行提交
 */
async function submit(e) {
    let data = {
        UserName: document.querySelector("#UserName").value,
        Sex: !!document.querySelector("input[name='Sex']:checked").value,
        PassWord: document.querySelector("#PassWord").value,
        Phone: document.querySelector("#Phone").value,
        ID: e.getAttribute("userid")
    }
    const result = await fetch("/User/AddUser", {
        method: "post",
        body: objectToformData(data)
    }).then(result => result.json())
    if (result.type === "success") {

        let myAlert = document.getElementById('myAlert')
        myModal.hide();
        myAlert.style.visibility = "visible";
        myAlert.innerHTML = result.message + '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>';
        setTimeout(() => {
            myAlert.style.visibility = "hidden";
                // 页面重新刷新
                location.reload();
        }, 1000)
    }
    document.querySelector("#submit").setAttribute("userid", "0");


}

/**
 * 对象转formData
 *
 */
function objectToformData(data) {
    const formData = new FormData();
    Object.keys(data).forEach((key) => {
        formData.append(key, data[key]);
    });
    return formData
}

// 修改用户信息
async function changeUserInfo(e) {
    document.querySelector("#modalContent").innerHTML = await getAddUserInfo();
    myModal.toggle();
    const userInfo = await fetch("/User/GetUserInfo", {
        method: "post",
        body: objectToformData({userId: e.getAttribute("userid")})
    }).then(result => result.json())
    document.querySelector("#UserName").value = userInfo.data.UserName;
    document.querySelector("#PassWord").value = userInfo.data.PassWord;
    document.querySelector("#Phone").value = userInfo.data.Phone;
    if (!userInfo.data.Sex) {
        document.querySelector("#radioWoman").setAttribute("checked", "checked");
    }
    document.querySelector("#submit").setAttribute("userid", userInfo.data.ID);
}
</script>
</body>
</html>